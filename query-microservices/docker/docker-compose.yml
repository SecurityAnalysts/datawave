version: '2.2'
services:
  discovery:
    image: consul:1.9.8
    hostname: discovery
    environment:
      - 'CONSUL_LOCAL_CONFIG={"datacenter": "demo_dc", "disable_update_check": true}'
      - CONSUL_BIND_INTERFACE=eth0
    # defined as host:container
    ports:
      - "8400"
      - "8500"
      - "53"
    networks:
      - demo

  messaging:
    image: rabbitmq:3.7.7-alpine
    volumes:
      - ${RABBITMQ_CONFIG_DIR:-./rabbitmq-config}:/etc/rabbitmq
    environment:
      - TCP_PORTS=15672, 5672
      - RABBITMQ_ERLANG_COOKIE="mycookie"
    ports:
      - "15672:15672"
    networks:
      - demo
    depends_on:
      discovery:
        condition: service_started

  zookeeper:
    profiles:
      - kafka
      - full
    image: docker.io/bitnami/zookeeper:3
    ports:
      - "3181"
    networks:
      - demo
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_PORT_NUMBER=3181

  kafka:
    profiles:
      - kafka
      - full
    image: docker.io/bitnami/kafka:2
    ports:
      - "9093"
    networks:
      - demo
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:3181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_started

  kafdrop:
    profiles:
      - kafka
      - full
    image: obsidiandynamics/kafdrop
    ports:
      - "8999:9000"
    networks:
      - demo
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      kafka:
        condition: service_started

  configuration:
    image: datawave/config-service:1.5-SNAPSHOT
    command:
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,native,open_actuator
      - --spring.cloud.consul.host=discovery
      - --spring.cloud.config.server.native.searchLocations=file:///microservice-config
    environment:
      - 'KEYSTORE_LOCATION=classpath:/testServer.p12'
      - KEYSTORE_PASSWORD=ChangeIt
      - KEY_ALIAS=certificate
    ports:
      - "8888:8888"
    volumes:
      - ${CONFIG_DIR:-./config}:/microservice-config:ro
    networks:
      - demo
    depends_on:
      messaging:
        condition: service_started

  cache:
    image: datawave/hazelcast-service:1.7-SNAPSHOT
    # This can be scaled up, but sometimes the nodes fail to cluster
    scale: 1
    command:
      - --spring.profiles.active=consul,compose
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.cloud.consul.host=discovery
    ports:
      - "5701-5703"
      - "8080"
      - "8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/cache/mgmt/health
      # If scaling up beyond 1 instance, configure healthchecks
      # interval: 30s
      # timeout: 10s
      # retries: 8
      # start_period: 80s
    depends_on:
      configuration:
        condition: service_started

  authorization:
    image: datawave/authorization-service:1.11-SNAPSHOT
    command:
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,mock,compose
      - --spring.cloud.consul.host=discovery
    ports:
      - "8080"
      - "8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/authorization/mgmt/health
    depends_on:
      cache:
        condition: service_healthy

  audit:
    image: datawave/audit-service:1.10-SNAPSHOT
    command:
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,compose
      - --spring.cloud.consul.host=discovery
    environment:
      - "ZOOKEEPER_HOST=${HOSTNAME}"
    # This mapping is required to enable the metrics service to communicate
    # with host-deployed services like hadoop, zookeeper, and accumulo.
    # These values are set locally in .env via bootstrap.sh
    extra_hosts:
      - "${HOSTNAME}:${HOST_IP}"
      - "${HOST_FQDN}:${HOST_IP}"
    ports:
      - "8080"
      - "8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/audit/mgmt/health
    depends_on:
      authorization:
        condition: service_healthy

  metrics:
    image: datawave/query-metric-service:1.3-SNAPSHOT
    command:
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,compose,remoteauth
      - --spring.cloud.consul.host=discovery
    environment:
      - "ZOOKEEPER_HOST=${HOSTNAME}"
    # This mapping is required to enable the metrics service to communicate
    # with host-deployed services like hadoop, zookeeper, and accumulo.
    # These values are set locally in .env via bootstrap.sh
    extra_hosts:
      - "${HOSTNAME}:${HOST_IP}"
      - "${HOST_FQDN}:${HOST_IP}"
    ports:
      - "8180:8080"
      - "8543:8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/querymetric/mgmt/health
    depends_on:
      authorization:
        condition: service_healthy

  dictionary:
    profiles:
      - dictionary
      - full
    image: datawave/dictionary-service:1.2-SNAPSHOT
    command:
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,compose,remoteauth
      - --spring.cloud.consul.host=discovery
    environment:
      - "ZOOKEEPER_HOST=${HOSTNAME}"
    # This mapping is required to enable the metrics service to communicate
    # with host-deployed services like hadoop, zookeeper, and accumulo.
    # These values are set locally in .env via bootstrap.sh
    extra_hosts:
      - "${HOSTNAME}:${HOST_IP}"
      - "${HOST_FQDN}:${HOST_IP}"
    ports:
      - "8280:8080"
      - "8643:8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/dictionary/mgmt/health
    depends_on:
      authorization:
        condition: service_healthy

  query:
    image: datawave/query-service:1.0-SNAPSHOT
    command:
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,compose,remoteauth,storage,metricssource,query
      - --spring.cloud.consul.host=discovery
    environment:
      - AUDIT_SERVER_URL=http://audit:8080/audit
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/query/mgmt/health
    depends_on:
      audit:
        condition: service_healthy
      authorization:
        condition: service_healthy
      metrics:
        condition: service_healthy

  executor-pool1:
    image: datawave/query-executor-service:1.0-SNAPSHOT
    command:
      - --spring.application.name=executor-pool1
      - --spring.cloud.config.name=executor
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,compose,storage,metricssource,query,pool1
      - --spring.cloud.consul.host=discovery
    environment:
      - "ZOOKEEPER_HOST=${HOSTNAME}"
    # This mapping is required to enable the metrics service to communicate
    # with host-deployed services like hadoop, zookeeper, and accumulo.
    # These values are set locally in .env via bootstrap.sh
    extra_hosts:
      - "${HOSTNAME}:${HOST_IP}"
      - "${HOST_FQDN}:${HOST_IP}"
    ports:
      - "8080"
      - "8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/executor-pool1/mgmt/health
    depends_on:
      authorization:
        condition: service_healthy
      metrics:
        condition: service_healthy

  executor-pool2:
    image: datawave/query-executor-service:1.0-SNAPSHOT
    command:
      - --spring.application.name=executor-pool2
      - --spring.cloud.config.name=executor
      - --spring.output.ansi.enabled=ALWAYS
      - --spring.profiles.active=consul,compose,storage,metricssource,query,pool2
      - --spring.cloud.consul.host=discovery
    environment:
      - "ZOOKEEPER_HOST=${HOSTNAME}"
    # This mapping is required to enable the metrics service to communicate
    # with host-deployed services like hadoop, zookeeper, and accumulo.
    # These values are set locally in .env via bootstrap.sh
    extra_hosts:
      - "${HOSTNAME}:${HOST_IP}"
      - "${HOST_FQDN}:${HOST_IP}"
    ports:
      - "8080"
      - "8443"
    volumes:
      - ${PKI_DIR:-./pki}:/etc/pki:ro
    networks:
      - demo
    healthcheck:
      test: curl -f http://localhost:8080/executor-pool2/mgmt/health
    depends_on:
      authorization:
        condition: service_healthy
      metrics:
        condition: service_healthy

networks:
  demo:
